upstream php {
        server unix:/var/run/php/php7.0-fpm.socket;
        server 127.0.0.1:9000;
}

server {
	listen 80;
	server_name denverprophit.us learning.denverprophit.us img.denverprophit.us dev.denverprophit.us;
	return 301 https://$host$request_uri$is_args$args;
}

server {
	listen 443 ssl http2;
	# listen 443 http2; if you're using latest nginx version 1.9.5+
	server_name www.denverprophit.us learning.denverprophit.us denverprophit.us img.denverprophit.us dev.denverprophit.us;
        root /home/denverpr/public_html;
	keepalive_timeout 300;
	proxy_read_timeout 300;
	index index.php

	ssl on;
	ssl_stapling on;
	ssl_stapling_verify on;

	# root CA + Intermediate
	ssl_trusted_certificate /etc/nginx/conf.d/ca.pem;
	ssl_certificate /etc/nginx/conf.d/domain.crt;
	ssl_certificate_key /etc/nginx/conf.d/domain.key;
	# Early TLS Migration For PCI Compliance
	ssl_protocols TLSv1.1 TLSv1.2;

	ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!DES-CBC3-SHA';

	ssl_dhparam /etc/nginx/conf.d/dhparams.pem;
	ssl_prefer_server_ciphers on;
	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 10m;

	# Gzip Settings
	gzip_static on;
	gzip_http_version   1.1;
	gzip_proxied        expired no-cache no-store private auth no_last_modified;
	gzip_disable        "MSIE [1-6]\.";
	gzip_vary           on;
	# HSTS Settings
	add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
	add_header X-Served-By "DPCG, Co.";
	 

	location ~* .(gif|jpg|jpeg|png|ico|wmv|3gp|avi|mpg|mpeg|mp4|flv|mp3|mid|js|css|wml|swf)$ {
	# Per RFC2616 - 1 year maximum expiry
	# http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html
	expires max;
	add_header Pragma public;
	add_header Cache-Control "public, must-revalidate, proxy-revalidate";
	access_log  off;
	log_not_found off;

	# Some browsers still send conditional-GET requests if there's a
	# Last-Modified header or an ETag header even if they haven't
	# reached the expiry date sent in the Expires header.
	add_header Last-Modified "";
	add_header ETag "";
	break;
	}

	location = /favicon.ico {
                log_not_found off;
                access_log off;
        }

        location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
        }

	# Add trailing slash to */wp-admin requests.
        rewrite /wp-admin$ $scheme://$host$uri/ permanent;

	# deliver a static 404
        error_page 404 /404.html;
        location  /404.html {
            internal;
        }

        # Deliver 404 instead of 403 "Forbidden"
        error_page 403 = 404;

        # Do not allow access to files giving away your WordPress version
        location ~ /(\.|wp-config.php|readme.html|licence.txt) {
            return 404;
        }

	# Deny access to wp-login.php
	location = /wp-login.php {
	limit_req zone=one burst=1 nodelay;
	}

	# Rewrite for versioned CSS+JS via filemtime
        location ~* ^.+\.(css|js)$ {
            rewrite ^(.+)\.(\d+)\.(css|js)$ $1.$3 last;
            expires 31536000s;
            access_log off;
            log_not_found off;
            add_header Pragma public;
            add_header Cache-Control "max-age=31536000, public";
        }
	
	 # deny all apache .htaccess or .htpasswd files
        location ~ /\.ht
        {
            deny all;
        }
	# Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

	# Deny access to uploads that aren’t images, videos, music, etc.
	location ~* ^/wp-content/uploads/.*.(html|htm|shtml|php|js|swf)$ {
		deny all;
	}

    # POST requests and URLs with a query string should always go to PHP
    if ($request_method = POST) {
        set $skip_cache 1;
    }   

    if ($query_string != "") {
        set $skip_cache 1;
    }   

    # Don't cache URIs containing the following segments
    if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
        set $skip_cache 1;
    }   

    # Don't use the cache for logged-in users or recent commenters
    if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass
        |wordpress_no_cache|wordpress_logged_in") {
        set $skip_cache 1;
    }

	location / {
        	try_files $uri $uri/ =404 $uri/ /index.php?$args;
    }
 
	location ~ \.php$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        	include /etc/nginx/fastcgi_params;
        	fastcgi_cache_bypass $skip_cache;
        	fastcgi_no_cache $skip_cache;
		fastcgi_cache_valid 200 60m;
		}
############
# RESTRICTIONS
############

# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
	location ~* /(?:uploads|files)/.*\.php$ {
 		deny all;
	}

}
